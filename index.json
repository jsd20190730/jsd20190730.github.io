[
{
	"uri": "/00-course-intro-and-tools/",
	"title": "Course Introduction &amp; Tools",
	"tags": [],
	"description": "",
	"content": " Lesson 00 Class Introduction \u0026amp; Tools "
},
{
	"uri": "/01-command-line-js-and-git/",
	"title": "Command Line JS &amp; Git",
	"tags": [],
	"description": "",
	"content": " Lesson 01 Command Line JavaScript \u0026amp; Git "
},
{
	"uri": "/class-resources/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": "  Referencing documentation is a core task for developers.\n Documentation communicates how something (in our case programming languages, software libraries) works.\n Good documentation reduces implementation time and increases predictability of our software programs.\n  We will be referring to the following list of the documentation resources frequently throughout the course:\nHTML MDN\u0026rsquo;s HTML Reference\nCSS MDN\u0026rsquo;s CSS Reference\nJavascript MDN\u0026rsquo;s Javascript Reference\njQuery jQuery Documentation\n"
},
{
	"uri": "/class-resources/git-commands/",
	"title": "Git Commands",
	"tags": [],
	"description": "",
	"content": " The following is a summary of the most commonly used git commands\nCreate Repositories Start a new repository or obtain one from an existing URL\n   Command Description     git init Creates a new local repository in the current directory   git init [project-name] Creates a new local repository with the specified name   git clone [url] Downloads a project and its entire version history    Making Changes    Command Description     git status Lists all new or modified files to be committed   git add [file] Snapshots the file in preparation for versioning   git commit -m \u0026quot;[descriptive message]\u0026quot; Records file snapshots permanently in version history   git diff Shows file differences not yet staged   git diff --staged Shows file differences between staging and the last file version   git reset [file] Unstages the file, but preserve its contents    Working with Branches    Command Description     git branch Lists all local branches in the current repository   git branch [branch-name] Creates a new branch   git checkout [branch-name] Switches to the specified branch and updates the working directory   git merge [branch] Combines the specified branch’s history into the current branch   git branch -d [branch-name] Deletes the specified branch    Review History    Command Description     git log Lists version history for the current branch   git log --follow [file] Lists version history for a file, including renames   git show [commit] Outputs metadata and content changes of the specified commit   git diff [first-branch]...[second-branch] Shows content differences between two branches    Synchronize Changes    Command Description     git fetch [bookmark] Downloads all history from the repository bookmark   git merge [bookmark]/[branch] Combines bookmark’s branch into current local branch   git push [alias] [branch] Uploads all local branch commits to GitHub   git pull Downloads bookmark history and incorporates changes    "
},
{
	"uri": "/01-command-line-js-and-git/intro-to-the-command-line/",
	"title": "Intro the the Command Line",
	"tags": [],
	"description": "",
	"content": " Introduction to the Command Line  The command line is the heart of your operating system\n Almost anything you can do from a GUI (Graphical User Interface), you can also do from the command line, but FASTER!\n We\u0026rsquo;ll learn how to navigate computer files and folders using the terminal; this will help us when we start working with git and GitHub\n  Command Line Basics Here are some important UNIX commands to know as you\u0026rsquo;re working on the terminal.\n   Command Description Command Description     ls List the contents of the directory atom Open atom   cd Change directories pwd Print working directory   mkdir Make directory say Make your computer talk   rmdir Remove empty directories open Open a particular file in their default application   rm Remove files or directories ./ The current folder   touch Create an empty file ../ One folder above your current working directory   echo Return a string ~/ The home folder    "
},
{
	"uri": "/01-command-line-js-and-git/code-along-command-line-intro/",
	"title": "Code Along: Command Line Intro",
	"tags": [],
	"description": "",
	"content": " Code Along: Command Line Intro For Macs: * Open the \u0026ldquo;Terminal\u0026rdquo; app (Applications \u0026gt; Utilities \u0026gt; Terminal) * Optionally, download and install iTerm 2, which is a replacement for the terminal app that is more configurable.\nFor Windows: * Open the \u0026ldquo;Command Prompt\u0026rdquo; application. * For a better experience, try Console.\nGet familiar with the basic commands on the terminal!\nWhen copying the following code snippets, DO NOT include the $ this is a universal symbol to indicate that the anything following the \u0026lsquo;$\u0026rsquo; should be entered into the command line\n Step 0: Navigate to your class folder on your command line  From your command line, navigate to your class folder (i.e. the folder named jsd)\n Navigate to your jsd from your Root Directory. cd ~ and then cd Documents/jsd (assuming your class folder is named \u0026lsquo;jsd\u0026rsquo; and located in your Documents folder)\n  Step 1: Make a new directory and \u0026ldquo;change\u0026rdquo; into it  Create a directory named command_line_tutorial\n$ mkdir command_line_tutorial  Change into this directory\n$ cd command_line_tutorial   Step 2: Create some files from the command line  Create a file named \u0026ldquo;index.html\u0026rdquo; using the touch command.\n$ touch index.html   Step 3: Open your your text editor from the command line $ atom .   Use subl if you are using sublime  Step 4: Create an empty folder and remove it  Create a folder named test_folder\n$ mkdir test_folder  Now remove it\n$ rmdir test_folder   Student Exercise - Part I : More Independent Practice Complete the following instructions below in the Terminal application.\n Create a folder in your jsd/lesson_01_files directory named my_site\n Once inside that folder, create three empty files:\n goals.html\n worries.html\n index.html\n  Open the my_site folder with in your text editor\n  In the respective files (goals.html and worries.html), write your top three goals and top three worries for this course.\n Paste the following contents into index.html:  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;My Site \u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026quot;goals.html\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://i.imgur.com/dosK05U.gif\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;br\u0026gt; \u0026lt;a href=\u0026quot;worries.html\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://i.imgur.com/2s0HwpM.gif\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Open index.html with your browser and make sure you see your goals and worries.  Student Exercise - Part II: More Independent Practice  Use your new knowledge of the command line to create a lesson folder for each of the remaining lessons in the course inside your jsd folder\n There are 20 lessons in the course and the lesson names should use the following format: lesson_02_files, lesson_03_files, etc\n The last class should be named lesson_19_files (we started counting at 00)\n  "
},
{
	"uri": "/class-resources/keyboard-shortcuts/",
	"title": "Keyboard Shortcuts",
	"tags": [],
	"description": "",
	"content": " General Window Management \u0026amp; Browser Shortcuts    Action Mac Windows     Open Chrome Developer Tools cmd+option + i F2 or ctrl + shift + i   Refresh page cmd + R ctrl + R   Switch between applications cmd + tab alt + tab   Switch between windows in the same application cmd + ~     Atom Shortcuts Files, Windows, Tabs Management    Command macOS Windows Linux Description     Open Settings Menu cmd+, ctrl+, ctrl+, Opens the Atom\u0026rsquo;s settings menu   Open File (Fuzzy) cmd+p or cmd+t ctrl+p or ctrl+t ctrl+p or ctrl+t Opens the Fuzzy Finder   Browse Open Files cmd+b ctrl+b ctrl+b Browse tabs within the window   Previous Tab alt+cmd+left ctrl+pageup ctrl+pageup Cycles left through open tabs (in the active pane)   Next Tab alt+cmd+right ctrl+pagedown ctrl+pagedown Cycles right through open tabs (in the active page)   Toggle Tree View cmd+\\ ctrl+\\ ctrl+\\ Toggles Atom\u0026rsquo;s file Tree View   Show Available Snippets alt+shift+s alt+shift+s alt+shift+s Shows the snippets available to Atom   Save cmd+s ctrl+s ctrl+s Saves the currently active file   Save As shift+cmd+s ctrl+shift+s ctrl+shift+s Saves the currently active file under a different name   Save All alt+cmd+s   Saves all changed files   Close Tab cmd+w ctrl+w ctrl+w Closes the currently active tab   Close Window shift+cmd+w ctrl+shift+w ctrl+shift+w Closes the currently active editor window   Split Window cmd+k up/down/left/right ctrl+k up/down/left/right ctrl+k up/down/left/right Split the currently active tab in one of the four directions   Focus Pane cmd+k cmd+up/down/left/right ctrl+k ctrl+up/down/left/right ctrl+k ctrl+up/down/left/right Move the focus to the pane in one of the four directions   Toggle full screen ctrl+cmd+f F11 F11 Toggle full screen window    Editing    Command macOS Windows Linux Description     Duplicate Lines shift+cmd+d ctrl+shift+d ctrl+shift+d Duplicates the line of the current cursor position and creates a new line under it with the same contents   Delete Line ctrl+shift+k ctrl+shift+k ctrl+shift+k Deletes the current line   Move Line Up ctrl+cmd+up ctrl+up ctrl+up Moves the contents of the current cursor position up one line. If there is a line above with content, the current lines content will swap with the one above it.   Move Line Down ctrl+cmd+down ctrl+down ctrl+down Moves the contents of the current cursor position down one line. If there is a line below with content, the line\u0026rsquo;s content will swap with the one below it.   Find/Replace cmd+f ctrl+f ctrl+f Opens up the Find/Replace panel   Find Next cmd+g F3 F3 Toggles forward through the results of the current buffer in the file while the Find/Replace panel is active   Find Previous shift+cmd+g shift+F3 shift+F3 Toggles backward through the results of the current buffer in the file while the Find/Replace panel is active   Find in Project shift+cmd+f ctrl+shift+f ctrl+shift+f Opens the Find in Project Panel   Go To Line ctrl+g ctrl+g ctrl+g Opens the Go To Line panel   Go To Matching Bracket ctrl+m ctrl+m ctrl+m The cursor goes to the matching top bracket that the cursor is ecapsulated in   Select Line cmd+l ctrl+l ctrl+l Selects the entire line the cursor\u0026rsquo;s current position is in   Toggle Comment cmd+/ ctrl+/ ctrl+/ Toggles the selected text into a comment of the current grammar   Column Selection ctrl+shift+up/down ctrl+alt+up/down shift+alt+up/down Allows to select multiple rows, where the same edit will be applied   Select Same Words cmd+d ctrl+d ctrl+d If you select a word, and then hit the key combo for this command, Atom will select the next same word for you. Then you can either type directly (which will replace the old words) or use left or right arrow to append things.   Undo Selection cmd+u ctrl+u ctrl+u This undoes the previous selection, like from Select Same Words.   Select All The Same Words At Once cmd+ctrl+g alt+f3 alt+f3 This shortcut is similar to cmd+d/ctrl+d but it selects all the matching words at once.    "
},
{
	"uri": "/02-data-types/",
	"title": "Data Types",
	"tags": [],
	"description": "",
	"content": " Lesson 02 Data Types "
},
{
	"uri": "/class-resources/node-git-installation/mac-os-x/",
	"title": "Mac OS X Installation Instructions",
	"tags": [],
	"description": "",
	"content": " Mac OS X Installation Instructions 1) Open your terminal application\n Open your terminal (Applications \u0026gt; Utilities \u0026gt; Terminal)\n All of the following commands (below) that start with $ should be copied and pasted in your terminal / command prompt (also referred to as the \u0026ldquo;command line\u0026rdquo;)\n DO NOT include the \u0026lsquo;$\u0026rsquo; when copying and pasting the commands below; \u0026lsquo;$\u0026rsquo; is a universal symbol for the terminal / command line\n Press the enter / return key on your keyboard after pasting the command\n  2) Install brew\n Brew is a package manager that we use to install various command line applications to your computer.\n Paste the following command in your Terminal, and hit enter:\n  $ ruby -e \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026quot;  3) Install Git\nGit is used to track the state of your code over time. GitHub has built its platform on Git technology. We will be using both Git and GitHub to distribute code, submit assignments, and offer feedback.\nPaste the following command in your Terminal, and hit enter to install Git:\n $ brew install git  4) Configure Git\n Copy and paste the following two commands (separately) into your Terminal. Replace the name and email address values with your own   $ git config --global user.name \u0026quot;Steve Jobs\u0026quot; $ git config --global user.email \u0026quot;steve@apple.com\u0026quot;  5) Install Node\n Refer to the package installer on Node’s website  "
},
{
	"uri": "/00-course-intro-and-tools/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Cover class logistics, structure \u0026amp; keys to success\n Introduce tools you will be using throughout the class\n Discuss the benchmarks for assessments in terms of class participation, homework, and unit projects\n Confirm installation and configuration of Node, Git, and other command line tools\n Practice programmatic thinking by writing pseudocode\n  "
},
{
	"uri": "/01-command-line-js-and-git/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Use the most common commands to navigate and modify files / directories via the command line\n Learn the basics of working with a Git project\n Gain familiarity with the most common git commands\n Learn how GitHub is used for developer collaboration\n Run basic JavaScript script on the command line using Node\n  "
},
{
	"uri": "/03-conditionals-and-loops/",
	"title": "Conditionals and Loops",
	"tags": [],
	"description": "",
	"content": " Lesson 03 Conditionals and Loops "
},
{
	"uri": "/class-resources/atom-editor-settings/",
	"title": "Recommended Atom Editor Settings",
	"tags": [],
	"description": "",
	"content": " All of the settings below can be accessed using the following steps:\n Mac: cmd + , -\u0026gt; Editor PC: ctrl + , -\u0026gt; Editor  Setting indentation levels / default tab-size During our course we will be using a set indentation level of 2 spaces (1 indentation level = 2 spaces). Atom makes it easy conform to this approach by setting our tab to a set level of indentation.\nAfter updating this setting, pressing the tab key will represent one level of indentation which will translate to 2 spaces.\nDisplaying indentation guides Displaying the indentation guide provides a visual way of helping you ensure your indentation levels are correct\nSetting wordwrap Wordwrap ensures that long lines in your code are automatically wrapped to the next line. This improves readability of your code.\n"
},
{
	"uri": "/04-functions-and-scope/",
	"title": "Functions and Scope",
	"tags": [],
	"description": "",
	"content": " Lesson 04 Functions and Scope "
},
{
	"uri": "/01-command-line-js-and-git/git-overview/",
	"title": "Git Overview",
	"tags": [],
	"description": "",
	"content": " Version Control System (VCS)  Tracks the history of changes as people and teams collaborate on projects together (think \u0026ldquo;track changes feature available for MS Word or Google Docs\u0026rdquo;)\n Developers can review project history to find out:\n Which changes were made?\n Who made the changes?\n When were the changes made?\n Why were changes needed?\n   What is Git?  Git is VCS that is distributed - meaning developers don\u0026rsquo;t need a constant connection to be able to collaborate with other developers (unlike other VCSs)\n Allows developers to work anywhere and collaborate asynchronously from any time zone\n Git is the most popular VCS, used by over 70% of developers across the world\n Git operates a robust filesystem that keeps track every change to every file in your project by taking snapshots of a projects files every time changes are committed\n Git and GitHub are not the same\n  "
},
{
	"uri": "/class-resources/node-git-installation/windows/",
	"title": "Windows Installation Instructions",
	"tags": [],
	"description": "",
	"content": " Windows Installation Instructions 1) Open the Command Prompt application\n All of the following commands (below) that start with $ should be copied and pasted in your terminal / command prompt (also referred to as the \u0026ldquo;command line\u0026rdquo;)\n DO NOT include the \u0026lsquo;$\u0026rsquo; when copying and pasting the commands below; \u0026lsquo;$\u0026rsquo; is a universal symbol for the terminal / command line\n Press the enter / return key on your keyboard after pasting the command\n  2) Install Git\n Git is used to track the state of your code over time. GitHub has built its platform on Git technology. We will be using both Git and GitHub in this class to distribute code, submit assignments, and offer feedback.\n Git can be downloaded and installed from this URL.\n  3) Configure Git\n In order to interact with Git, you\u0026rsquo;ll need to first open the Git Bash utility. A quick way to access this terminal is by right clicking your desktop and choosing \u0026ldquo;Git Bash\u0026rdquo;.\n Copy and paste the following two commands (separately) into your Terminal / Command Prompt. Replace the name and email address values with your own\n   $ git config --global user.name \u0026quot;Steve Jobs\u0026quot; $ git config --global user.email \u0026quot;steve@apple.com\u0026quot;  4) Install Node\n Refer to the package installer on Node’s website  "
},
{
	"uri": "/class-resources/atom-themes/",
	"title": "Working with Atom Themes",
	"tags": [],
	"description": "",
	"content": " Changing Themes Atom allows you to easily switch between your installed themes by doing the following:\n Opening Atom Settings (mac: cmd + , | pc: ctrl + ,) Select Themes in the left-hand menu Select the dropdown menu labeled Syntax Themes Choose one of the installed themes listed in the dropdown menu  Atom comes pre-installed with a set of themes. See that section below to add new themes to Atom\n Installing New Themes Atom allows you to install themes created by developers who participate in Atom\u0026rsquo;s vibrant community. Atom has a dedication section on their official site for the discovery of these themes (Atom Themes)\nHere are steps involved in adding a new Atom theme:\n Visit https://atom.io/themes Find a theme that you\u0026rsquo;d like to install Press the install button on the theme\u0026rsquo;s page An alert will be displayed asking you if you would like to open Atom - select the option labeled Open Atom While in Atom Settings, press the button labeled Install to install the new theme Select Themes in the left-hand menu of Atom Settings Select the dropdown menu labeled Syntax Themes Select the newly installed theme from the dropdown menu to apply the new theme to Atom  Here\u0026rsquo;s an example of the installation of an Atom theme named Atom Material\n"
},
{
	"uri": "/01-command-line-js-and-git/github/",
	"title": "Github",
	"tags": [],
	"description": "",
	"content": " What is Github?  Web-based Git repository hosting service\n Built on top of git\n Serves as the remote repository for a developer\u0026rsquo;s git projects\n Home to +90% of all open source projects\n Has become a \u0026ldquo;social network\u0026rdquo; for developers share, discuss and collaborate on software projects\n Many companies also use GitHub internally to privately collaborate on software projects with the other software engineers within their organization\n  "
},
{
	"uri": "/01-command-line-js-and-git/git-vocabulary/",
	"title": "Git Vocabulary",
	"tags": [],
	"description": "",
	"content": " Git Vocabulary Repository  Most basic element of GitHub\n A repository can be referred to as a project\n contains all of a project\u0026rsquo;s files\n Stores each file\u0026rsquo;s revision history\n Repositories can have multiple collaborators and can be either public or private.\n  Commit  A \u0026ldquo;revision\u0026rdquo;, is an individual change to a file (or set of files)\n Git\u0026rsquo;s version of saving\n Commits save a \u0026ldquo;snapshot\u0026rdquo; of all of the project\u0026rsquo;s files at that point in time\n Using commits you can \u0026ldquo;time travel\u0026rdquo; and navigate back to any previous commit that was made throughout the history of the project\n Commits usually contain a commit message which is a brief description of what changes were made\n  Branch  Parallel version of a repository\n Branches allow developers to work on new features without affecting the \u0026ldquo;master\u0026rdquo; branch and disrupting the \u0026ldquo;live\u0026rdquo; version\n The process of creating a separate branch to work on a feature is referred to as \u0026ldquo;creating a feature branch\u0026ldquo;\n After developers have added their new feature (on their feature branch) they will then make a Pull Request (which is a request for comments and a request to Merge their changes back into the main branch (master branch))\n  Master Branch  The default branch found in every Git respository\n For most companies, the master branch reflects that latest version of production code (i.e. working code available to customers)\n  Merge  Merging takes the changes from one branch (in the same repository or from a fork), and applies them into another\n This often happens as a Pull Request (which can be thought of as a request for comments and a request to merge into the another branch * usually the master branch)\n  Push  Refers to sending your committed changes to a remote repository such as GitHub.com\n For instance, if you change something locally, you\u0026rsquo;d want to then push those changes so that others may access them\n  Pull  Pulls code from a remote repository and merges it with code in your local repository (on your computer)  Fork  A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project\n Most commonly, forks are used to either propose changes to someone else\u0026rsquo;s project or to use someone else\u0026rsquo;s project as a starting point for your own idea\n  Clone  Copies a remote repository (i.e. repository in the cloud on a platform like Github.com) and creates a local copy of the repository on your computer\n Cloning creates a link between the the remote and local copy of a repository, allowing you to your code in sync between the two\n  Pull Request  Pull requests are proposed changes to a repository submitted by a user and accepted or rejected by a repository\u0026rsquo;s collaborators (i.e. team members).\n Pull requests can be thought of as a developer asking for permission to merge their changes into the master branch\n Pull requests each have their own discussion forum, where developer can discuss the changes requested and suggest further revisions.\n This discussion as also referred to as Code Reviews\n  Great resource for all things git can be found here\n "
},
{
	"uri": "/05-objects-and-json/",
	"title": "Objects and JSON",
	"tags": [],
	"description": "",
	"content": " Lesson 05 Objects and JSON "
},
{
	"uri": "/01-command-line-js-and-git/git-basics/",
	"title": "Git Basics",
	"tags": [],
	"description": "",
	"content": " Git Basics  Before we can understand how git saves files, we need to cover some concepts about how git works  Three States of a Git file  Git has three main states that your files can reside in: committed, modified, and staged\n committed: files that have been saved / recorded to the repository\u0026rsquo;s history\n staged: files that have been modified\n modified: files that has been modified but have not yet been staged and committed to project\u0026rsquo;s history\n   Git Projects have three main sections  Git projects are broken up into three main sections:   Working Directory - where all the recent “unstaged” changes (since your last commit) reside\n modified files reside in the Working Directory  Staging Area where all your staged changes live ; stores information about what will go into your next commit (i.e. changes to be committed)\n staged files reside in the staging area  Git directory (repository) where all the changes throughout history of a git project are permanently stored; changes are recorded to the Git directory through the use of commits\n committed files reside in the git directory / repository   Typical Git Workflow  The basic Git workflow goes something like this:\n You modify files in your working directory\n You stage the files, adding snapshots of them to your staging area\n You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory\n   "
},
{
	"uri": "/00-course-intro-and-tools/class-logistics-materials/",
	"title": "Class Logistics &amp; Materials",
	"tags": [],
	"description": "",
	"content": " Class Logistics  Class Schedule: Tuesdays \u0026amp; Thursdays, 6:30pm - 9:30pm, from Jul 30th through Oct 3rd\n Break: 15 minute break during the middle of class from 7:45pm to 8:00pm (subject to change depending on flow of the class, but you\u0026rsquo;ll always get a 15 min break)\n Class Materials: Most lessons will include a set of files that you\u0026rsquo;ll work with during that lesson, we\u0026rsquo;ll refer to these files as the \u0026ldquo;lesson files\u0026rdquo;\n Homework: Homework assignments will be assigned at the end of class on Thursdays and assignments will be due the following Thursdays\n Reading Assignment / Tutorials: Reading Assignments and Tutorials may be assigned after a class. They are usual short in nature and are meant to help increase your understanding of upcoming or past concepts. If assigned, you will be expected to complete them before the next class.\n Labs: Labs are in-class assignments completed at the end of class; they can be done completed individually or in groups.\n Code Alongs: Small projects or exercises that the instructor and the class complete together\n Exercises: Short in-class exercises that are completed by students (either individually or in teams)\n Office Hours: Weekly Office Hours - Schedule TBD\n Final Project: Pick something your passionate about; Single Page Application (SPA) that incorporates concepts covered throughout the class (more detail will be provided later in the course)\n  "
},
{
	"uri": "/01-command-line-js-and-git/code-along-basic-git-workflow/",
	"title": "Code Along: Basic Git Workflow",
	"tags": [],
	"description": "",
	"content": " Code Along: Basic Git Workflow  There\u0026rsquo;s a learning curve when working with Git\n The best way to learn how Git works is to see it in action\n Along the way, we\u0026rsquo;re going introduce important concepts and Git Commands\n This tutorial is meant to be interactive, so please follow along\n The tutorial will involve heavy use of the command line\n  Step 0: Navigate to your class folder on your command line  From your command line, navigate to your class folder (i.e. the folder named jsd)  This tutorial assumes that you already have Git installed. Git installation instructions can be found here\n Step 1: Set up your project directory  Navigate into the lesson_01_files directory (this assumes you are currently in your jsd directory)\n$ cd lesson_01_files  Create a new directory named git_intro\n$ mkdir git_intro  Navigate into the git_intro directory using the cd command\n$ cd git_intro  git_intro is where all the files for this project will reside\n  Step 2: Create git repository for our project  In order to use git to track all the changes within this project we need to create a repository  Repositories (or often, \u0026lsquo;repos\u0026rsquo;, for short) represent the entire collection of files and folders associated with a project, along with each file’s revision history\n  One way to create a repository is to use the git init command\n Let\u0026rsquo;s create a new git repository to track all the changes inside your git_intro project\n Initialize a new repository by running the following command:\n$ git init  Confirm that you received output in your terminal that looks similar to the following:\n Initialized empty Git repository in /jsd/lesson_01_files/git_intro/.git/  Congrats! Git is now set up to track all changes to this project\n  Step 3: Add a new file to the repository  Create a new file using the touch command\n$ touch homer_simpson_quote.txt  Next, open up your text editor and add the following content to homer_simpson_quote.txt and save the file\nTo start, press any key. Where’s the ANY key?  After creating the new file, you can use the git status command to see which files git knows exist\n$ git status  Your output should look similar to the following:\n On branch master No commits yet Untracked files: (use \u0026quot;git add \u0026lt;file\u0026gt;...\u0026quot; to include in what will be committed) homer_simpson_quote.txt nothing added to commit but untracked files present (use \u0026quot;git add\u0026quot; to track)   Git is telling us that they acknowledge that we\u0026rsquo;ve created a new file called homer_simpson_quote.txt but will not do anything with it until we use the git add command\n Our changes to homer_simpson_quote.txt are in the \u0026ldquo;Working Directory\u0026rdquo; and in order to eventually commit those changes to our repository\u0026rsquo;s history, we first need to stage our changes using git add\n   Step 4: Add a file to the staging environment  Let\u0026rsquo;s use the git add command to add our newly updated file to the staging area, after which run git status\n$ git add homer_simpson_quote.txt $ git status  git status should now result in the following output:\nOn branch master No commits yet Changes to be committed: (use \u0026quot;git rm --cached \u0026lt;file\u0026gt;...\u0026quot; to unstage) new file: homer_simpson_quote.txt  Git has added the file to the staging area (notice the \u0026ldquo;Changes to be committed\u0026rdquo; line)\n  Step 5: Create a commit  Let\u0026rsquo;s create our first commit\n Committing in git will move any updates that are currently in the \u0026ldquo;staging area\u0026rdquo; to our \u0026ldquo;git directory (repository)\u0026rdquo;\n We commit files using the git commit -m \u0026quot;[your short message goes here]\u0026quot; command\n  git commit -m \u0026quot;Add homer simpson quote\u0026quot;   The command should result in an output similar to the following:   [master (root-commit) fdd3af7] add homer simpson quote 1 file changed, 1 insertion(+) create mode 100644 homer_simpson_quote.txt   Standard conventions for commit messages:\n Must be in quotation marks\n Written in the present tense\n Should be brief (50 characters or less) when using -m\n   Step 6: Edit an existing file  We\u0026rsquo;ve seen what its like to create a new file with git, now let\u0026rsquo;s see how everything works when we edit an existing file\n Open homer_simpson_quote.txt in your text editor and change the word \u0026ldquo;start\u0026rdquo; to \u0026ldquo;begin\u0026rdquo;; save the file\n Let\u0026rsquo;s take a look how git handles this scenario, first lets run git status\n Your output should look like the following:\nOn branch master Changes not staged for commit: (use \u0026quot;git add \u0026lt;file\u0026gt;...\u0026quot; to update what will be committed) (use \u0026quot;git checkout -- \u0026lt;file\u0026gt;...\u0026quot; to discard changes in working directory) modified: homer_simpson_quote.txt no changes added to commit (use \u0026quot;git add\u0026quot; and/or \u0026quot;git commit -a\u0026quot;)  Git was smart enough to recognize that our homer_simpson_quote.txt file changed, but what if we wanted to see detailed change at a \u0026lsquo;line-level\u0026rsquo;?\n Let\u0026rsquo;s run the git diff command to accomplish this\n$ git diff  Here\u0026rsquo;s the output:\ndiff --git a/homer_simpson_quote.txt b/homer_simpson_quote.txt index 46b008a..bd6f49a 100644 --- a/homer_simpson_quote.txt +++ b/homer_simpson_quote.txt @@ -1 +1 @@ -To start, press any key. Where’s the ANY key? +To begin, press any key. Where’s the ANY key? (END)  Press the q key to escape from the git diff output in your terminal\n  Notice that git diff gives us a granular view of the recent changes that have occurred on a line by line level\n  Step 7: Stage and Commit your recent changes  Let\u0026rsquo;s stage the file so the changes can be moved from the \u0026ldquo;working directory\u0026rdquo; to the \u0026ldquo;staging area\u0026rdquo;\n$ git add homer_simpson_quote.txt  Next, let\u0026rsquo;s commit the changes\n$ git commit -m \u0026quot;update homer simpson quote\u0026quot;   Step 8: View a log of your commits  Git makes it easy for you to see a summarized history of your commits using the git log command\n$ git log  Here\u0026rsquo;s what the output should look like:\n   On branch master nothing to commit, working tree clean commit 4842dd2b97adfbfd6daaa7cfeb575c7ed1d2f44b (HEAD -\u0026gt; master) Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Thu Aug 1 17:52:49 2019 -0400 update homer simpson quote commit fdd3af7e7064dea063b625306c75adf0d04794c0 Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Thu Aug 1 17:21:10 2019 -0400 add homer simpson quote  Press the q key to escape from the git log output in your terminal\n Student Exercise: Make additional updates  Now it\u0026rsquo;s your turn to try your hand at using git\n Use your knowledge of the command line \u0026amp; git command accomplish the following (all of the following should occur within the git_intro project):\n Create a new file called marge_simpson_quote.txt\n Add the following text to marge_simpson_quote.txt\n   The only thing I'm high on is love.   Add another file called bart_simpson_quote.txt\n Add the following text to bart_simpson_quote.txt\n   Eat my shorts!   Stage and commit both files; use the following commit message: \u0026ldquo;add marge and bart simpson quotes\u0026rdquo;\n Use one of the introduced git commands to visual confirm that you now have three commits\n Edit the bart_simpson_quote.txt file and change \u0026ldquo;shorts\u0026rdquo; to \u0026ldquo;sneakers\u0026rdquo;\n Stage and commit your changes; use the following commit message: \u0026ldquo;update bart simpson quote\u0026rdquo;\n   "
},
{
	"uri": "/06-dom-and-jquery/",
	"title": "DOM &amp; jQuery",
	"tags": [],
	"description": "",
	"content": " Lesson 06 Intro to DOM \u0026amp; jQuery "
},
{
	"uri": "/class-resources/node-git-installation/linux/",
	"title": "Linux Installation Instructions",
	"tags": [],
	"description": "",
	"content": " Linux Installation Instructions 1) Find and Open your Terminal / Command Prompt application\n All of the following commands (below) that start with $ should be copied and pasted in your terminal / command prompt (also referred to as the \u0026ldquo;command line\u0026rdquo;)\n DO NOT include the \u0026lsquo;$\u0026rsquo; when copying and pasting the commands below; \u0026lsquo;$\u0026rsquo; is a universal symbol for the terminal / command line\n Press the enter / return key on your keyboard after pasting the command\n  2) Install Git\n Git is a tool used to track the state of your code over time. GitHub is a company that has made a business on top of the Git technology. We will be using both Git and GitHub in this class to distribute code, submit assignments and offer feedback.\n Git can be installed by running the following command:\n   $ sudo apt-get install build-essential git-core curl  3) Configure Git\n Copy and paste the following two commands (separately) into your Terminal. Replace the name and email address values with your own   $ git config --global user.name \u0026quot;Steve Jobs\u0026quot; $ git config --global user.email \u0026quot;steve@apple.com\u0026quot;  4) Install Node.js\n $ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt-get install -y nodejs $ apt-get install --yes build-essential  "
},
{
	"uri": "/00-course-intro-and-tools/course-structure/",
	"title": "Course Structure",
	"tags": [],
	"description": "",
	"content": " Overview  The course has 20 classes\n What you\u0026rsquo;ll learn:\n Fundamentals of JavaScript: including programming concepts such as data types, variables, and loops—the core concepts of programming\n Object Oriented JavaScript (OOP) and APIs: Learn how JavaScript can be used to exchange information and functionality within our programs\n Practical applications of JavaScript: Learn how to JavaScript can be used to manipulate websites and applications\n  3 Projects\n Slackbot\n Todo Application\n Final Project\n   "
},
{
	"uri": "/07-dom-and-jquery-continued/",
	"title": "DOM &amp; jQuery, Continued",
	"tags": [],
	"description": "",
	"content": " Lesson 07 Intro to DOM \u0026amp; jQuery, Continued "
},
{
	"uri": "/00-course-intro-and-tools/tools/",
	"title": "Course Tools",
	"tags": [],
	"description": "",
	"content": " Text Editor:\n Why?: Text editor is a program that developers use to create and edit a range of programming language files. We\u0026rsquo;ll be using Atom, because it\u0026rsquo;s open source (free) and really good.\n Download Atom\n  Browser:\n Why?: Google chrome is a robust browser with a variety of tools that are helpful to developers.\n Install Google Chrome\n  Github:\n Why?: Github (and Git) are tools/applications used to by developers to manage their code and work collaboratively with each other. You\u0026rsquo;ll be using Github/Git to submit our homework assignments. kj\n Create a Github Account\n    Slack:\n Why?: Is a popular chat application that we\u0026rsquo;ll be using as our primary method of communication both during and outside of class\n Join the GA NYC Part Time Students Slack Community slack channel\n You should have received an emailed invitation to join GA’s slack team\n Don’t see an invitation in your inbox? Check your spam folder - many of Slack’s invitation emails tend to end up there. Let me know if you weren’t sent an invite and we’ll get you sorted out.\n  Add yourself to the dedicated Slack Channel for our class named #jsd-7-30-19 (see instructions on how to join a Slack Channel here)\n  Wireframes:\n Why?: Wireframes are a planning tools that helps you visualize the layout and other aspects of your web projects before writing any code.\n Multiple options:\n Whimsical - free wireframing software\n Google Drawing\n Pen \u0026amp; Paper\n  Example of a wireframe:\n   "
},
{
	"uri": "/08-ajax-and-apis/",
	"title": "Ajax and APIs",
	"tags": [],
	"description": "",
	"content": " Lesson 08 Ajax and APIs\u0026rdquo; "
},
{
	"uri": "/09-asynchronous-js-and-callbacks/",
	"title": "Asynchronous JS and Callbacks",
	"tags": [],
	"description": "",
	"content": " Lesson 09 Asynchronous JS and Callbacks "
},
{
	"uri": "/00-course-intro-and-tools/folder-structure/",
	"title": "Folder Organization",
	"tags": [],
	"description": "",
	"content": " Recommended Folder Organization  Create a folder in your Documents folder (My Documents on Windows) called jsd\n At beginning of every class, you\u0026rsquo;ll use git (this process will be explained in the next class) to download any starter files to your jsd folder are available for that day\u0026rsquo;s lesson\n As the course progresses you\u0026rsquo;ll have a neatly organized listing of all of your work that looks similar to this:\n  "
},
{
	"uri": "/class-resources/node-git-installation/",
	"title": "Node &amp; Git Installation",
	"tags": [],
	"description": "",
	"content": " Node \u0026amp; Git Installation  You will need to install certain tools that will be used throughout the course. The installation instructions vary depending on whether you have a Mac, Windows, or Linux machine.\n Choose the installation instructions specific to your OS below and follow the step-by-step instructions:\n Mac OS X\n Windows\n Linux\n   Helpful Debugging Tips Error installing due to permissions\nPermissions issues are common when installing programs on the terminal. In order to install command line utilities, you need to be signed into a user account on your computer with administrator-level rights. If you have trouble with this, please ask a member of the instructional team for help.\nGoogle is your friend\nEven experienced programmers occasionally need to look up error messages on Google. If you experience an error, it’s likely that someone else has experienced the error, as well. To find the fix, copy and paste the error message into Google, but remove content specific to your computer to ensure the accuracy of your search. You will most likely find a reference to your specific error. StackOverflow is a trustworthy reference.\n"
},
{
	"uri": "/10-project-build-a-slackbot/",
	"title": "Project: Build a Slackbot",
	"tags": [],
	"description": "",
	"content": " Lesson 10 Project: Build a Slackbot "
},
{
	"uri": "/11-advanced-apis/",
	"title": "Advanced APIs",
	"tags": [],
	"description": "",
	"content": " Lesson 11 Advanced APIs "
},
{
	"uri": "/00-course-intro-and-tools/confirm-node-git-installation/",
	"title": "Confirm Node &amp; Git Installation",
	"tags": [],
	"description": "",
	"content": " Confirm Node \u0026amp; Git Installation 1) Ensure that you followed the installation instructions for your Operation System found here: Node and Git Installation\n2) Open up your console / terminal\n For Mac OS X users:\n Open the \u0026ldquo;Terminal\u0026rdquo; app (Applications \u0026gt; Utilities \u0026gt; Terminal)  For Windows:\n Open the \u0026ldquo;Command Prompt\u0026rdquo; application.   3) In the terminal type the following command to confirm git was successfully installed:\n $ git  4) In the terminal type the following command to confirm node was successfully installed:\n $ node  Note: type control-c to exit out of node\n"
},
{
	"uri": "/12-prototypal-inheritance/",
	"title": "Prototypal Inheritance",
	"tags": [],
	"description": "",
	"content": " Lesson 12 Prototypal Inheritance "
},
{
	"uri": "/00-course-intro-and-tools/what-is-programming/",
	"title": "What is Programming?",
	"tags": [],
	"description": "",
	"content": " What is Programming?  List of instructions that a computer needs in order to complete a task\n Instructions are provided in a programming language that the computer understands\n These set of instructions are commonly referred as source code or a program\n There are many programming languages available, during this course we will be learning JavaScript\n  "
},
{
	"uri": "/13-closures-and-this/",
	"title": "Closures &amp; this",
	"tags": [],
	"description": "",
	"content": " Lesson 13 Closures \u0026amp; this "
},
{
	"uri": "/class-resources/keys-to-success/",
	"title": "Keys to Success",
	"tags": [],
	"description": "",
	"content": " Do your homework: More you practice the concepts learned in class, the faster you\u0026rsquo;ll pick them up\n Don\u0026rsquo;t try to memorize anything: You\u0026rsquo;ll memorize things naturally through the act of doing things over and over again. Besides, if you don\u0026rsquo;t remember something just look it up (i.e. google).\n Work smarter not harder: In additional to looking things up, developers are really good at referencing past code that they\u0026rsquo;ve used in the past to solve problems they encounter in the present. So keep your past code organized so you easily reference it later. You don\u0026rsquo;t get points for memorizing anything, but you do get points for being resourceful and using past work to help you move a litter faster today.\n Ask Questions: Don\u0026rsquo;t be afraid to ask questions, everyone learns differently, it\u0026rsquo;s the instructor\u0026rsquo;s responsibility to ensure you grasp the concepts. Your questions helps me (your instructor) understand what\u0026rsquo;s working and what\u0026rsquo;s not.\n Change your perspective of failure: Expects things to not work. That\u0026rsquo;s where the fun part and truly where the learning begins. It\u0026rsquo;s during the troubleshooting phase where\u0026rsquo;s you\u0026rsquo;ll gained a deep understanding of concepts taught in class. If everything worked the first time, you\u0026rsquo;d never learn anything :)\n Get comfortable with the fact that there are multiple ways to do things: If I gave a 10 experienced developers a coding homework assignment chances are that I will receive 10 different approaches and they\u0026rsquo;ll all be \u0026ldquo;correct\u0026rdquo; (meaning each approach will accomplish the stated goals of the assignment). There is no 1 right answers when it comes to coding. There are \u0026ldquo;best practices\u0026rdquo; some of which we will push in this course, others best practices will be learned through continued practice. Instead of focusing on what you think may be the \u0026ldquo;best\u0026rdquo; approach, just focus on ensuring that your program / assignments is the goals or requirements (\u0026ldquo;just get it things working first\u0026rdquo;).\n Perfection is the enemy of good enough: When you go through your homework assignments and labs your # 1 goal is to \u0026ldquo;just get things working\u0026rdquo; and not to make it perfect the first time. Get things working first (no matter how janky it may seem) and only after you\u0026rsquo;ve got it working should you go through the process developers call refactoring, optimizing the code without changing the behavior (i.e. making it look nice).\n Use names that make sense: As a developer you are going to be frequently tasked with naming things. Naming things is hard, but my advice is to be as explicit as possible. You should always write your code as if someone else is going to read it and you want them to be able to quickly understand what’s going on. One of the best ways to accomplish that is to use names that highly contextual. For example, if you have a variable that is supposed to represent a person’s first name, then be as explicit as possible:\n  // very bad - you don't get points for making names super short let n = \u0026quot;Kiara\u0026quot; // ok but not great let name = \u0026quot;Kiara\u0026quot; // best - explicit, there's no doubt what this variable should represent let firstName = \u0026quot;Kiara\u0026quot;  "
},
{
	"uri": "/14-intro-to-crud-and-firebase/",
	"title": "Intro to CRUD and Firebase",
	"tags": [],
	"description": "",
	"content": " Lesson 14 Intro to CRUD and Firebase "
},
{
	"uri": "/00-course-intro-and-tools/what-is-javascript/",
	"title": "What is Javascript?",
	"tags": [],
	"description": "",
	"content": " What is JavaScript?  programming language created in 1995 by Netscape (now Mozilla)\n It was created in 10 days\n Not the same as Java\n  What does JavaScript do?  Adds interactivity to your websites\n Makes web based software feel more like desktop software\n Can be used to save data to a database or to create desktop applications\n Improves overall user experience of web-based applications\n  Advantages of JavaScript  Javascript is the only programming language that all web browsers understand\n JavaScript is a programming language that is essential for web development\n JavaScript can be run in the browser (i.e. front-end) and on the server (i.e. backend through the use of Node.js)\n  This makes JavaScript the only programming language that is truly \u0026ldquo;full-stack\u0026rdquo; (i.e. supports both front-end and backend development)\n Documentation  Best resource of JavaScript documentation on the web can be found here: Mozilla Development Network - JavaScript Documentation  "
},
{
	"uri": "/15-deploying-your-app/",
	"title": "Deploying Your App",
	"tags": [],
	"description": "",
	"content": " Lesson 15 Deploying Your App "
},
{
	"uri": "/class-resources/learning-html-css/",
	"title": "Learning HTML &amp; CSS",
	"tags": [],
	"description": "",
	"content": " Here are some great (FREE) resources for learning HTML \u0026amp; CSS\nHTML \u0026amp; CSS  Codecademy - HTML \u0026amp; CSS course\n Shay Howe - Learn to Code HTML \u0026amp; CSS\n FreeCodeCamp Responsive Web Design Certification (300 hours)\n Udacity - Intro to HTML and CSS\n Khan Academy - Intro to HTML/CSS\n  Flexbox  MDN - Flexbox\n Flexbox - Flexbox Froggy\n Flexbox - Flexbox Zombies\n  CSS Selectors  MDN - CSS Selectors\n CSS Diner\n  CSS Grid  MDN - CSS Grid\n CSS Grid Garden\n  "
},
{
	"uri": "/00-course-intro-and-tools/pseudocode/",
	"title": "Pseudocode",
	"tags": [],
	"description": "",
	"content": " Pseudocode  Process of writing a program without using the syntax of a programming language\n Mixture of natural language and high-level programming concepts\n There is no standard way to write pseudocode, use langauge that can be understood by technical and non-technical people\n Use pseudocode as an \u0026ldquo;outline\u0026rdquo; for your real code\n  "
},
{
	"uri": "/00-course-intro-and-tools/class-exercise-smart-thermostat-pseudocode/",
	"title": "Class Exercise - Smart Thermostat Pseudocode",
	"tags": [],
	"description": "",
	"content": " Class Exercise: Thermostat logic in pseudocode We\u0026rsquo;re going to use pseudocode to describe the basic functionality of a smart thermostat\n As as class we are going to write some pseudocode for a program for a smart thermostat\n We’ll focus on coming up with the logic that will help the thermostat know when to turn the heat on and off\n  "
},
{
	"uri": "/00-course-intro-and-tools/group-exercise-rock-paper-scissors/",
	"title": "Group Exercise - Rock, Paper, Scissors",
	"tags": [],
	"description": "",
	"content": " Group Exercise: Rock, Paper and Scissors Form groups (of 2 or 3) and write pseudocode describing a game of Rock, Paper, Scissors\n"
},
{
	"uri": "/course-materials/",
	"title": "Course Materials",
	"tags": [],
	"description": "",
	"content": " Course Materials "
},
{
	"uri": "/homework-assignments/",
	"title": "Homework Assignments",
	"tags": [],
	"description": "",
	"content": " Homework Assignments "
},
{
	"uri": "/final-projects/",
	"title": "Final Projects",
	"tags": [],
	"description": "",
	"content": " Final Projects "
},
{
	"uri": "/class-resources/",
	"title": "Class Resources",
	"tags": [],
	"description": "",
	"content": " Class Resources "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "JSD",
	"tags": [],
	"description": "",
	"content": " JSD - JavaScript Development "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]