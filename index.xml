<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JSD on GA Javascript</title>
    <link>/</link>
    <description>Recent content in JSD on GA Javascript</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Jan 2017 18:05:18 -0500</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Objectives</title>
      <link>/01-command-line-js-and-git/objectives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/01-command-line-js-and-git/objectives/</guid>
      <description> Use the most common commands to navigate and modify files / directories via the command line
 Learn the basics of working with a Git project
 Gain familiarity with the most common git commands
 Learn how GitHub is used for developer collaboration
 Run basic JavaScript script on the command line using Node
  </description>
    </item>
    
    <item>
      <title>Objectives</title>
      <link>/02-javascript-basics/objectives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/objectives/</guid>
      <description>After this lesson, students will be able to:
 Describe the concept of a &amp;ldquo;data type&amp;rdquo; and how it relates to variables
 Declare, assign to, and manipulate data stored in a variable
 Create arrays and access values in them
 Understand the difference between comparison operators
 Distinguish between the different types of logical operators
 Run simple JavaScript programs from the command line using Node
  </description>
    </item>
    
    <item>
      <title>Objectives</title>
      <link>/03-control-flow-and-loops/objectives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/03-control-flow-and-loops/objectives/</guid>
      <description>After this lesson, students will be able to:
 Use if/else conditionals to control program flow based on Boolean (true or false) tests
 Use switch/case conditionals to control program flow based on matching explicit values
 Use while and do/while loops
 Understand how loop iteration using for and forEach works
  </description>
    </item>
    
    <item>
      <title>Documentation</title>
      <link>/class-resources/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/class-resources/documentation/</guid>
      <description>Referencing documentation is a core task for developers.
 Documentation communicates how something (in our case programming languages, software libraries) works.
 Good documentation reduces implementation time and increases predictability of our software programs.
  We will be referring to the following list of the documentation resources frequently throughout the course:
HTML MDN&amp;rsquo;s HTML Reference
CSS MDN&amp;rsquo;s CSS Reference
Javascript MDN&amp;rsquo;s Javascript Reference
jQuery jQuery Documentation</description>
    </item>
    
    <item>
      <title>Function Overview</title>
      <link>/04-functions-and-scope/function-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-functions-and-scope/function-overview/</guid>
      <description> What are Functions?  Functions are the main “building blocks” of the program; they allow the code to be called many times without repetition
 One of the main advantages of functions is code reuse
 You can control when functions are executed, for example - you can write functions that only get executed (or called) when a user clicks a specific button
  // a simple function that greets you with a &amp;#39;Good Morning&amp;#39; alert  // 1) Declare a function named greeting  function greeting(){ console(&amp;#39;Good Morning&amp;#39;) } // 2) Call (or run) the function  greeting()  </description>
    </item>
    
    <item>
      <title>Global Scope</title>
      <link>/04-functions-and-scope/scope/global-scope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-functions-and-scope/scope/global-scope/</guid>
      <description>Global Scope  Variables defined outside of a function are in in the Global Scope  Example // Global function because it was declared outside of a function let name = &amp;#39;Simone Biles&amp;#39; console.log(name) function bestGymnastEver() { // &amp;#39;name&amp;#39; variable is accessible here and everywhere else because it is global  console.log(name) } logName() // logs &amp;#39;Simone Biles&amp;#39;  JS Bin on jsbin.com</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>/02-javascript-basics/data-types/strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/data-types/strings/</guid>
      <description>Strings  Strings can consist of letters and other characters
 They are surrounded by either double quotes or single quotes (this is how you recognize you are working with a string)
 Concatenation allows you to combine strings
  // declare a variable called color and store a string  let color = &amp;#34;green&amp;#34;  Single or double quotes can be used for strings, but the opening quote must match the closing quote</description>
    </item>
    
    <item>
      <title>What are Variables?</title>
      <link>/02-javascript-basics/variables/what-are-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/variables/what-are-variables/</guid>
      <description>What are variables?  Allows us to store values and so our programs can keep track of Data
 Similar to algebra
 Helps you represent data or values
 Used to help your program “remember” values
 Can be thought of as a “box” that we put values in
 In programming, you store values in variables if you plan on referencing that value at a later time</description>
    </item>
    
    <item>
      <title>Git Commands</title>
      <link>/class-resources/git-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/class-resources/git-commands/</guid>
      <description>The following is a summary of the most commonly used git commands
Create Repositories Start a new repository or obtain one from an existing URL
   Command Description     git init Creates a new local repository in the current directory   git init [project-name] Creates a new local repository with the specified name   git clone [url] Downloads a project and its entire version history    Making Changes    Command Description     git status Lists all new or modified files to be committed   git add [file] Snapshots the file in preparation for versioning   git commit -m &amp;quot;[descriptive message]&amp;quot; Records file snapshots permanently in version history   git diff Shows file differences not yet staged   git diff --staged Shows file differences between staging and the last file version   git reset [file] Unstages the file, but preserve its contents    Working with Branches    Command Description     git branch Lists all local branches in the current repository   git branch [branch-name] Creates a new branch   git checkout [branch-name] Switches to the specified branch and updates the working directory   git merge [branch] Combines the specified branch’s history into the current branch   git branch -d [branch-name] Deletes the specified branch    Review History    Command Description     git log Lists version history for the current branch   git log --follow [file] Lists version history for a file, including renames   git show [commit] Outputs metadata and content changes of the specified commit   git diff [first-branch].</description>
    </item>
    
    <item>
      <title>Intro the the Command Line</title>
      <link>/01-command-line-js-and-git/intro-to-the-command-line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/01-command-line-js-and-git/intro-to-the-command-line/</guid>
      <description>Introduction to the Command Line  The command line is the heart of your operating system
 Almost anything you can do from a GUI (Graphical User Interface), you can also do from the command line, but FASTER!
 We&amp;rsquo;ll learn how to navigate computer files and folders using the terminal; this will help us when we start working with git and GitHub
  Command Line Basics Here are some important UNIX commands to know as you&amp;rsquo;re working on the terminal.</description>
    </item>
    
    <item>
      <title>Code Along: Command Line Intro</title>
      <link>/01-command-line-js-and-git/code-along-command-line-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/01-command-line-js-and-git/code-along-command-line-intro/</guid>
      <description>Code Along: Command Line Intro For Macs: * Open the &amp;ldquo;Terminal&amp;rdquo; app (Applications &amp;gt; Utilities &amp;gt; Terminal) * Optionally, download and install iTerm 2, which is a replacement for the terminal app that is more configurable.
For Windows: * Open the &amp;ldquo;Command Prompt&amp;rdquo; application. * For a better experience, try Console.
Get familiar with the basic commands on the terminal!
When copying the following code snippets, DO NOT include the $ this is a universal symbol to indicate that the anything following the &amp;lsquo;$&amp;rsquo; should be entered into the command line</description>
    </item>
    
    <item>
      <title>Git Workflow for Submitting Assignments</title>
      <link>/class-resources/git-workflow-submitting-assignments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/class-resources/git-workflow-submitting-assignments/</guid>
      <description>Step 0: Fork the Assignment Repository  This step is only done once per project
 Every assignment will be accompanied by repository url on GitHub
 Click on the provided url and then fork the repository
   Step 1: Clone the project down to your computer  This step is only done once per project
 While on the repository page of the forked repository, click on the &amp;ldquo;Clone or Download&amp;rdquo; button</description>
    </item>
    
    <item>
      <title>Keyboard Shortcuts</title>
      <link>/class-resources/keyboard-shortcuts/</link>
      <pubDate>Sun, 22 Jan 2017 18:05:18 -0500</pubDate>
      
      <guid>/class-resources/keyboard-shortcuts/</guid>
      <description>General Window Management &amp;amp; Browser Shortcuts    Action Mac Windows     Open Chrome Developer Tools cmd+option + i F2 or ctrl + shift + i   Refresh page cmd + R ctrl + R   Switch between applications cmd + tab alt + tab   Switch between windows in the same application cmd + ~     Atom Shortcuts Files, Windows, Tabs Management    Command macOS Windows Linux Description     Open Settings Menu cmd+, ctrl+, ctrl+, Opens the Atom&amp;rsquo;s settings menu   Open File (Fuzzy) cmd+p or cmd+t ctrl+p or ctrl+t ctrl+p or ctrl+t Opens the Fuzzy Finder   Browse Open Files cmd+b ctrl+b ctrl+b Browse tabs within the window   Previous Tab alt+cmd+left ctrl+pageup ctrl+pageup Cycles left through open tabs (in the active pane)   Next Tab alt+cmd+right ctrl+pagedown ctrl+pagedown Cycles right through open tabs (in the active page)   Toggle Tree View cmd+\ ctrl+\ ctrl+\ Toggles Atom&amp;rsquo;s file Tree View   Show Available Snippets alt+shift+s alt+shift+s alt+shift+s Shows the snippets available to Atom   Save cmd+s ctrl+s ctrl+s Saves the currently active file   Save As shift+cmd+s ctrl+shift+s ctrl+shift+s Saves the currently active file under a different name   Save All alt+cmd+s   Saves all changed files   Close Tab cmd+w ctrl+w ctrl+w Closes the currently active tab   Close Window shift+cmd+w ctrl+shift+w ctrl+shift+w Closes the currently active editor window   Split Window cmd+k up/down/left/right ctrl+k up/down/left/right ctrl+k up/down/left/right Split the currently active tab in one of the four directions   Focus Pane cmd+k cmd+up/down/left/right ctrl+k ctrl+up/down/left/right ctrl+k ctrl+up/down/left/right Move the focus to the pane in one of the four directions   Toggle full screen ctrl+cmd+f F11 F11 Toggle full screen window    Editing    Command macOS Windows Linux Description     Duplicate Lines shift+cmd+d ctrl+shift+d ctrl+shift+d Duplicates the line of the current cursor position and creates a new line under it with the same contents   Delete Line ctrl+shift+k ctrl+shift+k ctrl+shift+k Deletes the current line   Move Line Up ctrl+cmd+up ctrl+up ctrl+up Moves the contents of the current cursor position up one line.</description>
    </item>
    
    <item>
      <title>Declaring Functions</title>
      <link>/04-functions-and-scope/declaring-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-functions-and-scope/declaring-functions/</guid>
      <description>Declaring a Function  A function declaration is code that stipulates what the function can do
 Use the function keyword to define a function
 Functions can be given a name
 The name must be followed by parentheses
 The opening and closing curly braces indicate a “code block”
 The statements for your function goes within the code block
 Also referred to as &amp;ldquo;defining a function&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Declaring Variables</title>
      <link>/02-javascript-basics/variables/declaring-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/variables/declaring-variables/</guid>
      <description> Declaring Variables  Variables are created by declaring them
 Use the let keyword to declare a variable
 If you declare a variable without assigning it an initial value, the value of that variable will be undefined
  // declaring a variable  let firstName  Variables only need to be declared once
 </description>
    </item>
    
    <item>
      <title>HW Assignment #1</title>
      <link>/homework-assignments/hw-assignment-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/homework-assignments/hw-assignment-01/</guid>
      <description>Summary of this week&amp;rsquo;s homework assignment: Due Date: Thursday, August 15th
1. Complete Homework #1 - JS Basics, Control Flow &amp;amp; Loops  You are tasked with completing the problem set which is hosted on Github, see the url below:
 Github Repo for Homework #1 - JS Basics, Control Flow &amp;amp; Loops  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment
  2.</description>
    </item>
    
    <item>
      <title>Local Scope</title>
      <link>/04-functions-and-scope/scope/local-scope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-functions-and-scope/scope/local-scope/</guid>
      <description>Local Scope  Variables defined inside a function are in the local scope
 A variable with local scope cannot be referenced outside of that function
 Functions create their own private scope that prevents code from outside directly accessing it&amp;rsquo;s variables
  Example function showInspirationalMessage() { // &amp;#34;message&amp;#34; variable is declared **inside** a function which means it is LOCAL to this function  let message = &amp;#34;Don&amp;#39;t give up, you can do it!</description>
    </item>
    
    <item>
      <title>Mac OS X Installation Instructions</title>
      <link>/class-resources/node-git-installation/mac-os-x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/class-resources/node-git-installation/mac-os-x/</guid>
      <description>Mac OS X Installation Instructions 1) Open your terminal application  Open your terminal (Applications &amp;gt; Utilities &amp;gt; Terminal)
 All of the following commands (below) that start with $ should be copied and pasted in your terminal / command prompt (also referred to as the &amp;ldquo;command line&amp;rdquo;)
 DO NOT include the &amp;lsquo;$&amp;rsquo; when copying and pasting the commands below; &amp;lsquo;$&amp;rsquo; is a universal symbol for the terminal / command line</description>
    </item>
    
    <item>
      <title>Numbers</title>
      <link>/02-javascript-basics/data-types/numbers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/data-types/numbers/</guid>
      <description>Numbers  Used for tasks involving counting or calculating sums
 Whole numbers (integers) or decimals (floats)
 Numbers can be negative or positive
 Numbers do not have quotes around them
  There are no commas used when expressing numbers, for example the number 1,750 is expressed as 1750 in Javascript
 JS Bin on jsbin.com
Converting Strings to Numbers  Sometimes you will find yourself in a position where you need to convert a string to a number</description>
    </item>
    
    <item>
      <title>Objectives</title>
      <link>/00-course-intro-and-tools/objectives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00-course-intro-and-tools/objectives/</guid>
      <description> Cover class logistics, structure &amp;amp; keys to success
 Introduce tools you will be using throughout the class
 Discuss the benchmarks for assessments in terms of class participation, homework, and unit projects
 Confirm installation and configuration of Node, Git, and other command line tools
 Practice programmatic thinking by writing pseudocode
  </description>
    </item>
    
    <item>
      <title>Scope in Block Statements</title>
      <link>/04-functions-and-scope/scope/block-statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-functions-and-scope/scope/block-statements/</guid>
      <description>Scope in Block Statements  Block statements like if and switch conditions or for and while loops, unlike functions, will create a new scope if you use let or const but NOT when you use var  Example  Declaring a variable within a Block statement using let creates local scope  if (true) { // this &amp;#39;if&amp;#39; conditional block creates a new scope because we use &amp;#39;let&amp;#39;  let name = &amp;#39;Prince&amp;#39; // name is local to the if block  console.</description>
    </item>
    
    <item>
      <title>if Statement</title>
      <link>/03-control-flow-and-loops/conditionals/if-statement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/03-control-flow-and-loops/conditionals/if-statement/</guid>
      <description>if Statement  Used when you want to have some sort of single branching logic  if (condition) { code to run if condition is true } // run some other code  Example let isRewardsMember = true let totalPrice = 100 if (isRewardsMember) { totalPrice = totalPrice * 0.80 } console.log(totalPrice)  JS Bin on jsbin.com</description>
    </item>
    
    <item>
      <title>while Loop</title>
      <link>/03-control-flow-and-loops/loops-and-iteration/while-loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/03-control-flow-and-loops/loops-and-iteration/while-loops/</guid>
      <description>while Loop  While loops run its statements as long as a specified condition evaluates to true  while (condition) { statement } // run some other code   If the condition becomes false, statement within the loop stops executing and control passes to the statement following the loop  Example let n = 0 while (n &amp;lt; 5) { console.log(n) n++ }  JS Bin on jsbin.com</description>
    </item>
    
    <item>
      <title>Booleans</title>
      <link>/02-javascript-basics/data-types/booleans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/data-types/booleans/</guid>
      <description>Booleans  Can only have a value of true or false
 true/false are special keywords in JavaScript and do not have quotes around them
  // declare a variable called isOn and assign a value of true let isOn = true // declare a variable called isWarm let isWarm // assign a value of false to isWarm isWarm = false   Booleans are useful for helping our programs make decisions (when used with conditionals, comparison &amp;amp; logical operators)</description>
    </item>
    
    <item>
      <title>Calling Functions</title>
      <link>/04-functions-and-scope/calling-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-functions-and-scope/calling-functions/</guid>
      <description>Calling a Function  Calling a function means you are using the function (as opposed to defining a function which only tells us what the function can do)
 To call a function you simply write function name followed by parentheses (don’t forget the parentheses!)
 Now you can call this function as many times as you want
  /** define / declare a function named shout() by itself this doesn&amp;#39;t do anything, we must &amp;#34;Call&amp;#34; it in order to use it **/ function shout() { console.</description>
    </item>
    
    <item>
      <title>Recommended Atom Editor Settings</title>
      <link>/class-resources/atom-editor-settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/class-resources/atom-editor-settings/</guid>
      <description>All of the settings below can be accessed using the following steps:
 Mac: cmd + , -&amp;gt; Editor PC: ctrl + , -&amp;gt; Editor  Setting indentation levels / default tab-size During our course we will be using a set indentation level of 2 spaces (1 indentation level = 2 spaces). Atom makes it easy conform to this approach by setting our tab to a set level of indentation.</description>
    </item>
    
    <item>
      <title>Switch Statement</title>
      <link>/03-control-flow-and-loops/switch-statement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/03-control-flow-and-loops/switch-statement/</guid>
      <description>Switch Statement  Used an alternative to if..else if statements
 Evaluates an expression, and matches that expression against each of the case clauses
 if there&amp;rsquo;s a match, the statements associated with that case clause will be executed
 The break keyword must be used to exit the Switch statement after a match is found
  switch(expression) { case x: // execute code block when expression === x  break // &amp;lt;- break must be called to exit the switch statement after the match  case y: // execute code block when expression === y  break // &amp;lt;- break must be called to exit the switch statement after the match  default: // execute code block when expression === when none of the above cases match }  Example let food = &amp;#34;apple&amp;#34; switch(food) { case &amp;#39;pear&amp;#39;: console.</description>
    </item>
    
    <item>
      <title>Updating Variables</title>
      <link>/02-javascript-basics/variables/updating-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/variables/updating-variables/</guid>
      <description>Updating Variables  We can provide variables with a value by updating a value to the variable
 An = (equal sign) is used to assign a value to variable
 This process of updating/changing variable&amp;rsquo;s value is also referred to as assigning a value to a variable
  let firstName // assigning a value to the variable firstName = &amp;#34;Cletus&amp;#34;  Declaring &amp;amp; Assigning Variables in one step  We can both declare and assign variables in one step</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>/02-javascript-basics/data-types/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/data-types/arrays/</guid>
      <description>Arrays  Used to when you are working with a list of values that are related to each other
 Use square brackets to create an array (this is also how you quickly recognize arrays)
 Values in an array are separated by commas
  Creating an Array  We can store variables just like any other data type
 You can create that doesn&amp;rsquo;t initially contain any values, this is called an empty array</description>
    </item>
    
    <item>
      <title>Git Overview</title>
      <link>/01-command-line-js-and-git/git-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/01-command-line-js-and-git/git-overview/</guid>
      <description>Version Control System (VCS)  Tracks the history of changes as people and teams collaborate on projects together (think &amp;ldquo;track changes feature available for MS Word or Google Docs&amp;rdquo;)
 Developers can review project history to find out:
 Which changes were made?
 Who made the changes?
 When were the changes made?
 Why were changes needed?
   What is Git?  Git is VCS that is distributed - meaning developers don&amp;rsquo;t need a constant connection to be able to collaborate with other developers (unlike other VCSs)</description>
    </item>
    
    <item>
      <title>Hoisting</title>
      <link>/04-functions-and-scope/hoisting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-functions-and-scope/hoisting/</guid>
      <description>Hoisting  Hoisting is a feature in JavaScript which allows access to function declarations before they’re defined
 This means that we can place a function call before our function declaration and everything will still work as expected
  Example // Calling greetWorld() BEFORE it&amp;#39;s function declararion greetWorld() // declaration of greetWorld() function greetWorld() { console.log(&amp;#39;Hello, World!&amp;#39;) }  JS Bin on jsbin.com
 Notice how hoisting allowed greetWorld() to be called before the greetWorld() function was defined</description>
    </item>
    
    <item>
      <title>Naming Rules for Variables</title>
      <link>/02-javascript-basics/variables/naming-rules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/variables/naming-rules/</guid>
      <description>Naming Rules for Variables    Do Don&amp;rsquo;t     Use variable names that start with a letter, $, or _ Use variable names that start with a number   Use variable names that include letters, numbers, $ or _ Create variable names that include a &amp;ldquo;-&amp;rdquo;, &amp;ldquo;.&amp;rdquo; or space   Use &amp;ldquo;lower camel case&amp;rdquo; when creating variable names made up of more than one word, for example: firstName Create variable names that use reserved Javascript keywords such as let, var, function or switch    Variables names should describe the kind of information the variable stores</description>
    </item>
    
    <item>
      <title>Objects</title>
      <link>/02-javascript-basics/data-types/objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/data-types/objects/</guid>
      <description>Objects  Objects are used to represent real world objects in programming
 Within an object, variables are known as properties and functions are known as methods
 Curly braces are a means of identifying if a variable is an object
  // create an object that represents a dog  let myDog = { name: &amp;#34;Fido&amp;#34;, age: 4, speak: function() { console.log(&amp;#39;Woof woof&amp;#39;) } }   In the example above, we created an object and stored it in a variable called myDog</description>
    </item>
    
    <item>
      <title>Opening Atom from Command Line</title>
      <link>/class-resources/opening-atom-from-command-line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/class-resources/opening-atom-from-command-line/</guid>
      <description>Atom allows you to open files from the command line
If you have Atom installed you can run the atom command with one or more file paths to open up those files in Atom.
Check if Atom is already configured to run on your computer&amp;rsquo;s Command Line Open up your terminal and run the following command
$ atom --help  You should receive output similar to the following
Atom Editor v1.</description>
    </item>
    
    <item>
      <title>Windows Installation Instructions</title>
      <link>/class-resources/node-git-installation/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/class-resources/node-git-installation/windows/</guid>
      <description>Windows Installation Instructions 1) Open the Command Prompt application  All of the following commands (below) that start with $ should be copied and pasted in your terminal / command prompt (also referred to as the &amp;ldquo;command line&amp;rdquo;)
 DO NOT include the &amp;lsquo;$&amp;rsquo; when copying and pasting the commands below; &amp;lsquo;$&amp;rsquo; is a universal symbol for the terminal / command line
 Press the enter / return key on your keyboard after pasting the command</description>
    </item>
    
    <item>
      <title>Working with Atom Themes</title>
      <link>/class-resources/atom-themes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/class-resources/atom-themes/</guid>
      <description>Changing Themes Atom allows you to easily switch between your installed themes by doing the following:
 Opening Atom Settings (mac: cmd + , | pc: ctrl + ,) Select Themes in the left-hand menu Select the dropdown menu labeled Syntax Themes Choose one of the installed themes listed in the dropdown menu  Atom comes pre-installed with a set of themes. See that section below to add new themes to Atom</description>
    </item>
    
    <item>
      <title>do..while Loop</title>
      <link>/03-control-flow-and-loops/loops-and-iteration/do-while-loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/03-control-flow-and-loops/loops-and-iteration/do-while-loops/</guid>
      <description>do..while Loop  A do&amp;hellip;while loop repeats until a specified condition evaluates to false  do { statement } while (condition)   statement is always executed once before the condition is checked (and then again until the while condition returns false)
 With do&amp;hellip;while loops, everything in-between the curly braces (i.e. statement(s)) will run at least once
  Example let n = 0 do { console.log(n) n++ } while (n &amp;lt; 0)   the loop will run at least once and then terminate because 0 is NOT &amp;lt; 0  JS Bin on jsbin.</description>
    </item>
    
    <item>
      <title>if..else Statement</title>
      <link>/03-control-flow-and-loops/conditionals/if-else/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/03-control-flow-and-loops/conditionals/if-else/</guid>
      <description>if..else Statement  Used when evaluating between just two choices
 These are great for “either or” situations
 You do not specify a condition for the “else” clause
  // if..else statement  if (condition) { code to run if condition is true } else { code to run if the above condition is NOT true } // run some other code  Example let yearOfBirth = 2001 if (yearOfBirth &amp;lt;= 2002) { console.</description>
    </item>
    
    <item>
      <title>Github</title>
      <link>/01-command-line-js-and-git/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/01-command-line-js-and-git/github/</guid>
      <description>What is Github?  Web-based Git repository hosting service
 Built on top of git
 Serves as the remote repository for a developer&amp;rsquo;s git projects
 Home to +90% of all open source projects
 Has become a &amp;ldquo;social network&amp;rdquo; for developers share, discuss and collaborate on software projects
 Many companies also use GitHub internally to privately collaborate on software projects with the other software engineers within their organization</description>
    </item>
    
    <item>
      <title>Arithmetic Operators</title>
      <link>/02-javascript-basics/arithmetic-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/arithmetic-operators/</guid>
      <description>Arithmetic Operators  Mathematical symbol that can act on two values (or variables) and produce a result
 JavaScript adheres to the PEDMAS approach when determining the order of operations
     Description Operator Example     Addition + 7 + 8   Subtraction - 34 - 12   Multiplication * 3 * 5   Division / 42 / 6   Modulus (Remainder) % 13 % 6 (returns 1, as 6 goes into 13 twice, leaving 1 as the remainder )   Exponential ** 4 ** 2 (returns 16 or 4 * 4)   Increment ++ 9++ (returns 10)   Decrement -- 37-- (returns 36)    Examples JS Bin on jsbin.</description>
    </item>
    
    <item>
      <title>Git Vocabulary</title>
      <link>/01-command-line-js-and-git/git-vocabulary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/01-command-line-js-and-git/git-vocabulary/</guid>
      <description>Git Vocabulary Repository  Most basic element of GitHub
 A repository can be referred to as a project
 contains all of a project&amp;rsquo;s files
 Stores each file&amp;rsquo;s revision history
 Repositories can have multiple collaborators and can be either public or private.
  Commit  A &amp;ldquo;revision&amp;rdquo;, is an individual change to a file (or set of files)
 Git&amp;rsquo;s version of saving
 Commits save a &amp;ldquo;snapshot&amp;rdquo; of all of the project&amp;rsquo;s files at that point in time</description>
    </item>
    
    <item>
      <title>Returning Values from Functions</title>
      <link>/04-functions-and-scope/returning-values-from-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-functions-and-scope/returning-values-from-functions/</guid>
      <description>Many times you will write a function and expect a value to be returned - this is called a return value
 To have your function return a value you must use the return keyword in the last line of the body of your function
 We use the return keyword when we want our function to &amp;ldquo;give us back&amp;rdquo; a value
 You can store the returned value in a variable and use it later in your program</description>
    </item>
    
    <item>
      <title>let vs var</title>
      <link>/02-javascript-basics/variables/let-vs-var/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/variables/let-vs-var/</guid>
      <description>let vs var  In recent past var was the only way to declare variables
 While var worked it a lot of confusing issues that came along with it
 let was introduced in the latest release of Javascript, ES6 to address these issues
 While var is still in use for legacy codebases, it is a recommended best practice to use let instead of var going forward</description>
    </item>
    
    <item>
      <title>Git Basics</title>
      <link>/01-command-line-js-and-git/git-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/01-command-line-js-and-git/git-basics/</guid>
      <description>Git Basics  Before we can understand how git saves files, we need to cover some concepts about how git works  Three States of a Git file  Git has three main states that your files can reside in: committed, modified, and staged
 committed: files that have been saved / recorded to the repository&amp;rsquo;s history
 staged: files that have been modified
 modified: files that has been modified but have not yet been staged and committed to project&amp;rsquo;s history</description>
    </item>
    
    <item>
      <title>Class Logistics &amp; Materials</title>
      <link>/00-course-intro-and-tools/class-logistics-materials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00-course-intro-and-tools/class-logistics-materials/</guid>
      <description>Class Logistics  Class Schedule: Tuesdays &amp;amp; Thursdays, 6:30pm - 9:30pm, from Jul 30th through Oct 3rd
 Break: 15 minute break during the middle of class from 7:45pm to 8:00pm (subject to change depending on flow of the class, but you&amp;rsquo;ll always get a 15 min break)
 Class Materials: Most lessons will include a set of files that you&amp;rsquo;ll work with during that lesson, we&amp;rsquo;ll refer to these files as the &amp;ldquo;lesson files&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Code Along: Basic Git Workflow</title>
      <link>/01-command-line-js-and-git/code-along-basic-git-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/01-command-line-js-and-git/code-along-basic-git-workflow/</guid>
      <description>Code Along: Basic Git Workflow  There&amp;rsquo;s a learning curve when working with Git
 The best way to learn how Git works is to see it in action
 Along the way, we&amp;rsquo;re going introduce important concepts and Git Commands
 This tutorial is meant to be interactive, so please follow along
 The tutorial will involve heavy use of the command line
  Step 0: Navigate to your class folder on your command line  From your command line, navigate to your class folder (i.</description>
    </item>
    
    <item>
      <title>Lab: JS Basics, Control Flow &amp; Loops</title>
      <link>/03-control-flow-and-loops/lab-js-basics-control-flow-loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/03-control-flow-and-loops/lab-js-basics-control-flow-loops/</guid>
      <description>Lab: JavaScript Basics, Control Flow &amp;amp; Loops  You are tasked with completing the problem set which is hosted on Github, see the url below:
 Github Repo for JS Basics, Control Flow &amp;amp; Loops Lab  Use the &amp;ldquo;Assignment Submission Git Workflow&amp;rdquo; (instructions) to access the lab files and submit your completed assignment
  Tips  Be resourceful, leverage the class notes, google, MDN or any other means at your disposal to solve these problems (a core developer skill is being able to look things up and find the answers)</description>
    </item>
    
    <item>
      <title>Linux Installation Instructions</title>
      <link>/class-resources/node-git-installation/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/class-resources/node-git-installation/linux/</guid>
      <description>Linux Installation Instructions 1) Find and Open your Terminal / Command Prompt application  All of the following commands (below) that start with $ should be copied and pasted in your terminal / command prompt (also referred to as the &amp;ldquo;command line&amp;rdquo;)
 DO NOT include the &amp;lsquo;$&amp;rsquo; when copying and pasting the commands below; &amp;lsquo;$&amp;rsquo; is a universal symbol for the terminal / command line
 Press the enter / return key on your keyboard after pasting the command</description>
    </item>
    
    <item>
      <title>Working with Parameters</title>
      <link>/04-functions-and-scope/working-with-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-functions-and-scope/working-with-parameters/</guid>
      <description>Declaring Functions that need information  Some functions need additional information in order to perform a specific task
 This additional information is referred to as “parameters”
 To provide parameters to a function, you specify them inside the parentheses after the parameter name
 The parameters are used like variables within the function body
 We use the return keyword when we want our function to &amp;ldquo;give us back&amp;rdquo; a value</description>
    </item>
    
    <item>
      <title>const</title>
      <link>/02-javascript-basics/variables/const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/variables/const/</guid>
      <description>const  Stands for constant
 These are variables for which its value does not change after it has been assigned an initial value
 This help make your code easier to debug and protects certain values from accidentally being overridden in your codebase
  Declaring a constant const are the same as let but with one key difference, values can only be assigned once to a const variable</description>
    </item>
    
    <item>
      <title>for Loop</title>
      <link>/03-control-flow-and-loops/loops-and-iteration/for-loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/03-control-flow-and-loops/loops-and-iteration/for-loop/</guid>
      <description>for Loop  The for loop consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.
 The three expression help determine how many times the loop will iterate before it terminates
 The statements involve an iterator variable (usually depicted as an &amp;ldquo;i&amp;rdquo;)
  for (statement 1; statement 2; statement 3) { // code block to be executed }   statement 1 is executed (one time) before the execution of the code block</description>
    </item>
    
    <item>
      <title>if..else if Statement</title>
      <link>/03-control-flow-and-loops/conditionals/if-else-if/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/03-control-flow-and-loops/conditionals/if-else-if/</guid>
      <description>if..else if Statement  Used when evaluation among more than two choices, use if/else if
 You must specify a condition for every else if clause
 You can use as many else if clauses as is needed
  // if..else if statement  if (condition) { code to run if this condition is true } else if (another condition) { code to run if this condition is true } else { code to run if NONE of the above conditions are true } // run some other code  Example let yourGrade = 84 if (yourGrade &amp;gt;= 90) { console.</description>
    </item>
    
    <item>
      <title>Code Along: Git Branching &amp; Merging</title>
      <link>/01-command-line-js-and-git/code-along-git-branching-merging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/01-command-line-js-and-git/code-along-git-branching-merging/</guid>
      <description>Code Along: Git Branching &amp;amp; Merging Step 0: Navigate to your class folder on your command line  From your command line, navigate to your class folder (i.e. the folder named jsd)  Step 1: Set up your project directory  Navigate into the lesson_01_files directory (this assumes you are currently in your jsd directory)
$ cd lesson_01_files  Create a new directory named nursery_rhymes
$ mkdir nursery_rhymes  Navigate into the nursery_rhymes directory using the cd command</description>
    </item>
    
    <item>
      <title>Comparison Operators</title>
      <link>/02-javascript-basics/comparison-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/comparison-operators/</guid>
      <description>Comparison Operators  Compares operands (the things on either side of the operator) and returns true or false (boolean) based one the comparison     Operator Description Example (all return true)     Equal (==) Returns true if the operands are equal 3 == &amp;ldquo;3&amp;rdquo; (uhmm yes this is actually true)   Not equal (!=) Returns true if the operands are not equal. (4 + 1) !</description>
    </item>
    
    <item>
      <title>Course Structure</title>
      <link>/00-course-intro-and-tools/course-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00-course-intro-and-tools/course-structure/</guid>
      <description>Overview  The course has 20 classes
 What you&amp;rsquo;ll learn:
 Fundamentals of JavaScript: including programming concepts such as data types, variables, and loops—the core concepts of programming
 Object Oriented JavaScript (OOP) and APIs: Learn how JavaScript can be used to exchange information and functionality within our programs
 Practical applications of JavaScript: Learn how to JavaScript can be used to manipulate websites and applications
  3 Projects</description>
    </item>
    
    <item>
      <title>Functions Calling Other Functions</title>
      <link>/04-functions-and-scope/functions-calling-other-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-functions-and-scope/functions-calling-other-functions/</guid>
      <description>Functions can call other functions  Function reusability is key results in cleaner code
 Reusing functions leverages key programming principle - Don&amp;rsquo;t Repeat Yourself (DRY)
  Example  In the example of below, the surfaceAreaOfCube function calls another function (areaOfSquare) instead of duplicating work that was already done  // Function that calculates area of a square  function areaOfSquare(side){ return side * side } areaOfSquare(3) // returns 9  // This is a function that calculates the // surface area of a cube that *reuses* the areaOfSquare function  function surfaceAreaOfCube(side){ return 6 * areaOfSquare(side) } surfaceAreaOfCube(7) // returns 294  JS Bin on jsbin.</description>
    </item>
    
    <item>
      <title>Course Tools</title>
      <link>/00-course-intro-and-tools/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00-course-intro-and-tools/tools/</guid>
      <description>Text Editor:
 Why?: Text editor is a program that developers use to create and edit a range of programming language files. We&amp;rsquo;ll be using Atom, because it&amp;rsquo;s open source (free) and really good.
 Download Atom
  Browser:
 Why?: Google chrome is a robust browser with a variety of tools that are helpful to developers.
 Install Google Chrome
  Github:
 Why?: Github (and Git) are tools/applications used to by developers to manage their code and work collaboratively with each other.</description>
    </item>
    
    <item>
      <title>Logical Operators</title>
      <link>/02-javascript-basics/logical-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/logical-operators/</guid>
      <description>Logical Operators  Evaluates between two conditions/expressions and returns true or false
 with &amp;amp;&amp;amp; (Logical And) operators, both conditions have to be true in order for the whole expression to be true
 with || (Logical Or) operators, any of the condition must be true for entire expression to be true; but if all conditions are false then the entire expression is false
     Operator Description Example (all return true)     Logical AND (&amp;amp;&amp;amp;) expr1 &amp;amp;&amp;amp; expr2 (3 &amp;gt; 1) &amp;amp;&amp;amp; &amp;ldquo;cat&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>forEach Loop</title>
      <link>/03-control-flow-and-loops/loops-and-iteration/for-each/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/03-control-flow-and-loops/loops-and-iteration/for-each/</guid>
      <description>forEach Loop  forEach() is an Array method executes a provided function once for each item (or element) in the array
 The function used in forEach is called a callback function because it is &amp;ldquo;called&amp;rdquo; as a result of some event
 The callback function for forEach provides the following:
 element - this current element from the array that is being evaluated
 index - this represents the current element&amp;rsquo;s index (or position in the array)</description>
    </item>
    
    <item>
      <title>ternary Operator</title>
      <link>/03-control-flow-and-loops/conditionals/ternary-operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/03-control-flow-and-loops/conditionals/ternary-operator/</guid>
      <description>ternary Operator  Used as a shortcut for the if statement  condition ? expression that is run if condition is true : expression that is run if condition is false  Example let isLactoseIntolerant = true let milkType = isLactoseIntolerant ? &amp;#34;almond&amp;#34; : &amp;#34;dairy&amp;#34; console.log(milkType)  JS Bin on jsbin.com
Exercise Rewrite the following if..else statement using a ternary operator:
let yearOfBirth = 2001 if (yearOfBirth &amp;lt;= 2002) { console.</description>
    </item>
    
    <item>
      <title>Single Responsibility Principle</title>
      <link>/04-functions-and-scope/single-responsibility-principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-functions-and-scope/single-responsibility-principle/</guid>
      <description>Single Responsibility Principle (SRP)  SRP is a programming best practice that advocates modular code
 Put another way, your programs should be broken up in such a way where each part is responsible for only one &amp;ldquo;thing&amp;rdquo; or domain
 SRP is often applied to functions
  Applying SRP to Functions  This concepts calls for your functions to only be &amp;ldquo;responsible&amp;rdquo; for one thing
 Often you&amp;rsquo;ll find that the logic in your functions are doing too much (for example: making calculations AND displaying the result to the screen)</description>
    </item>
    
    <item>
      <title>Folder Organization</title>
      <link>/00-course-intro-and-tools/folder-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00-course-intro-and-tools/folder-structure/</guid>
      <description>Recommended Folder Organization  Create a folder in your Documents folder (My Documents on Windows) called jsd
 At beginning of every class, you&amp;rsquo;ll use git (this process will be explained in the next class) to download any starter files to your jsd folder are available for that day&amp;rsquo;s lesson
 As the course progresses you&amp;rsquo;ll have a neatly organized listing of all of your work that looks similar to this:</description>
    </item>
    
    <item>
      <title>Confirm Node &amp; Git Installation</title>
      <link>/00-course-intro-and-tools/confirm-node-git-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00-course-intro-and-tools/confirm-node-git-installation/</guid>
      <description>Confirm Node &amp;amp; Git Installation 1) Ensure that you followed the installation instructions for your Operation System found here: Node and Git Installation
2) Open up your console / terminal
 For Mac OS X users:
 Open the &amp;ldquo;Terminal&amp;rdquo; app (Applications &amp;gt; Utilities &amp;gt; Terminal)  For Windows:
 Open the &amp;ldquo;Command Prompt&amp;rdquo; application.   3) In the terminal type the following command to confirm git was successfully installed:</description>
    </item>
    
    <item>
      <title>Code Along: Rolling Dice</title>
      <link>/04-functions-and-scope/code-along-rolling-dice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-functions-and-scope/code-along-rolling-dice/</guid>
      <description> Code Along: Rolling Dice  We&amp;rsquo;ll walk through the process using functions to create a program that simulates rolling dice
 The starter code for this code along is hosted on Github, see the url below:
 Code Along: Rolling Dice  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment
  </description>
    </item>
    
    <item>
      <title>What is Programming?</title>
      <link>/00-course-intro-and-tools/what-is-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00-course-intro-and-tools/what-is-programming/</guid>
      <description> What is Programming?  List of instructions that a computer needs in order to complete a task
 Instructions are provided in a programming language that the computer understands
 These set of instructions are commonly referred as source code or a program
 There are many programming languages available, during this course we will be learning JavaScript
  </description>
    </item>
    
    <item>
      <title>Keys to Success</title>
      <link>/class-resources/keys-to-success/</link>
      <pubDate>Sat, 16 Mar 2019 17:11:17 -0400</pubDate>
      
      <guid>/class-resources/keys-to-success/</guid>
      <description>Do your homework: More you practice the concepts learned in class, the faster you&amp;rsquo;ll pick them up
 Don&amp;rsquo;t try to memorize anything: You&amp;rsquo;ll memorize things naturally through the act of doing things over and over again. Besides, if you don&amp;rsquo;t remember something just look it up (i.e. google).
 Work smarter not harder: In additional to looking things up, developers are really good at referencing past code that they&amp;rsquo;ve used in the past to solve problems they encounter in the present.</description>
    </item>
    
    <item>
      <title>What is Javascript?</title>
      <link>/00-course-intro-and-tools/what-is-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00-course-intro-and-tools/what-is-javascript/</guid>
      <description>What is JavaScript?  programming language created in 1995 by Netscape (now Mozilla)
 It was created in 10 days
 Not the same as Java
  What does JavaScript do?  Adds interactivity to your websites
 Makes web based software feel more like desktop software
 Can be used to save data to a database or to create desktop applications
 Improves overall user experience of web-based applications</description>
    </item>
    
    <item>
      <title>Learning HTML &amp; CSS</title>
      <link>/class-resources/learning-html-css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/class-resources/learning-html-css/</guid>
      <description>Here are some great (FREE) resources for learning HTML &amp;amp; CSS
HTML &amp;amp; CSS  Codecademy - HTML &amp;amp; CSS course
 Shay Howe - Learn to Code HTML &amp;amp; CSS
 FreeCodeCamp Responsive Web Design Certification (300 hours)
 Udacity - Intro to HTML and CSS
 Khan Academy - Intro to HTML/CSS
  Flexbox  MDN - Flexbox
 Flexbox - Flexbox Froggy
 Flexbox - Flexbox Zombies</description>
    </item>
    
    <item>
      <title>Pseudocode</title>
      <link>/00-course-intro-and-tools/pseudocode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00-course-intro-and-tools/pseudocode/</guid>
      <description> Pseudocode  Process of writing a program without using the syntax of a programming language
 Mixture of natural language and high-level programming concepts
 There is no standard way to write pseudocode, use langauge that can be understood by technical and non-technical people
 Use pseudocode as an &amp;ldquo;outline&amp;rdquo; for your real code
  </description>
    </item>
    
    <item>
      <title>Class Exercise - Smart Thermostat Pseudocode</title>
      <link>/00-course-intro-and-tools/class-exercise-smart-thermostat-pseudocode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00-course-intro-and-tools/class-exercise-smart-thermostat-pseudocode/</guid>
      <description> Class Exercise: Thermostat logic in pseudocode We&amp;rsquo;re going to use pseudocode to describe the basic functionality of a smart thermostat
 As as class we are going to write some pseudocode for a program for a smart thermostat
 We’ll focus on coming up with the logic that will help the thermostat know when to turn the heat on and off
  </description>
    </item>
    
    <item>
      <title>Group Exercise - Rock, Paper, Scissors</title>
      <link>/00-course-intro-and-tools/group-exercise-rock-paper-scissors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/00-course-intro-and-tools/group-exercise-rock-paper-scissors/</guid>
      <description>Group Exercise: Rock, Paper and Scissors Form groups (of 2 or 3) and write pseudocode describing a game of Rock, Paper, Scissors</description>
    </item>
    
    <item>
      <title></title>
      <link>/02-javascript-basics/truthy-falsey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-javascript-basics/truthy-falsey/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>